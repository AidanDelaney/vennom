package org.eulerdiagrams.vennom.apCircles.utilities;import java.io.*;import java.util.*;import java.awt.Point;import java.awt.Polygon;import java.awt.event.*;import java.awt.geom.Area;import java.awt.geom.Ellipse2D;import java.awt.geom.Point2D;import org.eulerdiagrams.vennom.apCircles.*;import org.eulerdiagrams.vennom.apCircles.drawers.*;import org.eulerdiagrams.vennom.graph.*;import org.eulerdiagrams.vennom.graph.utilities.GraphUtility;/** * Just for quick testing of methods. */public class TestExactGeneral extends GraphUtility implements Serializable {	public int minNumberOfCircles = 3;	public int maxNumberOfCircles = 8;	public int zoneAreaMin = 100;	public int zoneAreaMax = 10000;		public int numberOfTests = 100;		AreaSpecification as = null;	public double idealMultipiler = 0.05;	public double separatorMultiplier = 20000.0;	public double containmentMultiplier = 0.01;	public double f = 1.0;		public double zoneErrorTotal = 0;	public double areaErrorTotal = 0;		public long diagramSeed = 256;	private static final long serialVersionUID = 1L;	public TestExactGeneral() {		super(KeyEvent.VK_2,"Test Exact General",KeyEvent.VK_2);	}	public TestExactGeneral(long seed) {		super(KeyEvent.VK_2,"Test Exact General",KeyEvent.VK_2);		diagramSeed = seed;	}	public void setDiagramSeed(long l) {diagramSeed = l;}	public void apply() {		zoneErrorTotal = 0;		areaErrorTotal = 0;				as = null;		Graph g = null;		Random random = new Random(100);		int i = 0;		for(int diagramNo = 1; diagramNo <= numberOfTests; diagramNo++) {			int numberOfCircles = random.nextInt(1+maxNumberOfCircles-minNumberOfCircles);			numberOfCircles += minNumberOfCircles;//System.out.println("diagram "+diagramNo+" numberOfCircles "+numberOfCircles+" i "+i);			String beforeFileName = "before"+diagramNo+".svg";			while(g == null) {				i++;								as = createExactGeneralSpecification(numberOfCircles, diagramNo*diagramSeed+i, beforeFileName);								if(as.getAbstractDiagram().findIntersectionGroups().size() > 1) { // no disconnected diagrams					 g = null;					 continue;				}				g = as.generateGeneralAugmentedIntersectionGraph();				if(g != null && g.getEdges().size() == 0) { // no trivial diagrams					g = null;					 continue;				}			}						String asString = as.toString();			asString = asString.replace('\n', ':');			long startTime = System.currentTimeMillis();			runGeneralTest(as);			double generalTime = (System.currentTimeMillis()-startTime)/1000.0;						String afterFileName = "after"+diagramNo+".svg";			File file = new File(afterFileName);			getGraphPanel().saveCirclesSVG(file);						//System.out.print("general\t"+asString+"\t");//System.out.println(report(as,getGraphPanel().getGraph())+"\t"+generalTime);			findErrors(as,getGraphPanel().getGraph());			zoneErrorTotal += zoneErrors;			areaErrorTotal += areaErrors;			g = null;		}	}		protected static double zoneErrors = 0;	protected static double areaErrors = 0;		public static void findErrors(AreaSpecification ad, Graph g) {				zoneErrors = 0;		areaErrors = 0;				TestRandomPierced.findErrors(ad,g);		zoneErrors += TestRandomPierced.missingZones.size()+TestRandomPierced.additionalZones.size();//System.out.println("missing "+missingZones);//System.out.println("additional "+additionalZones);//System.out.println("errorTotal "+errorTotal);		for(String zone : TestRandomPierced.errorMap.keySet()) {			areaErrors += TestRandomPierced.errorMap.get(zone);		}	}		public static String report(AreaSpecification ad, Graph g) {		TestRandomPierced.findErrors(ad,g);		String ret = "";		ret += TestRandomPierced.missingZones.size()+TestRandomPierced.additionalZones.size();//System.out.println("missing "+missingZones);//System.out.println("additional "+additionalZones);//System.out.println("errorTotal "+errorTotal);		double errorTotal = 0.0;		for(String zone : TestRandomPierced.errorMap.keySet()) {			errorTotal += TestRandomPierced.errorMap.get(zone);		}		ret += "\t"+errorTotal;				return ret;	}	protected void runGeneralTest(AreaSpecification as) {		Graph g = as.generateGeneralAugmentedIntersectionGraph();		getGraphPanel().setGraph(g);		GeneralAPForceModel fm = new GeneralAPForceModel();				fm.setIdealMultiplier(this.idealMultipiler);		fm.setSeparatorMultiplier(this.separatorMultiplier);		fm.setContainmentMultiplier(this.containmentMultiplier);		fm.setF(this.f);		fm.setGraphPanel(getGraphPanel());		fm.setRandomize(false);		fm.setAnimateFlag(false);		fm.layout();	}			public AreaSpecification createExactGeneralSpecification(int circleCount, long seed,String fileName) {				AreaSpecification areaSpecification = AreaSpecification.exactRandomDiagramFactory(50,50,300,300,15,100,circleCount,seed,fileName);		return areaSpecification;	}			}